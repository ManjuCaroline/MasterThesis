
Test_BNO_nRF_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000008c2  00000956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000966  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021aa  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d12  00000000  00000000  00002c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c41  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000045b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000723  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001010  00000000  00000000  00004e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e2 ec       	ldi	r30, 0xC2	; 194
  c0:	f8 e0       	ldi	r31, 0x08	; 8
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 31       	cpi	r26, 0x10	; 16
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e1       	ldi	r26, 0x10	; 16
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 31       	cpi	r26, 0x11	; 17
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  e2:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	8e e9       	ldi	r24, 0x9E	; 158
  ee:	94 e2       	ldi	r25, 0x24	; 36
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <AVR_Init+0x6>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <AVR_Init+0x10>
  fa:	00 00       	nop
  fc:	51 9a       	sbi	0x0a, 1	; 10
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 104:	08 95       	ret

00000106 <Init_SPI>:
 106:	24 9a       	sbi	0x04, 4	; 4
 108:	20 9a       	sbi	0x04, 0	; 4
 10a:	22 9a       	sbi	0x04, 2	; 4
 10c:	21 9a       	sbi	0x04, 1	; 4
 10e:	23 98       	cbi	0x04, 3	; 4
 110:	8c b5       	in	r24, 0x2c	; 44
 112:	81 65       	ori	r24, 0x51	; 81
 114:	8c bd       	out	0x2c, r24	; 44
 116:	8c b5       	in	r24, 0x2c	; 44
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	8c bd       	out	0x2c, r24	; 44
 11c:	28 9a       	sbi	0x05, 0	; 5
 11e:	2c 98       	cbi	0x05, 4	; 5
 120:	08 95       	ret

00000122 <spi_tranceiver>:
 122:	8e bd       	out	0x2e, r24	; 46
 124:	0d b4       	in	r0, 0x2d	; 45
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <spi_tranceiver+0x2>
 12a:	8e b5       	in	r24, 0x2e	; 46
 12c:	08 95       	ret

0000012e <Write_byte>:
 12e:	cf 93       	push	r28
 130:	c6 2f       	mov	r28, r22
 132:	95 e3       	ldi	r25, 0x35	; 53
 134:	9a 95       	dec	r25
 136:	f1 f7       	brne	.-4      	; 0x134 <Write_byte+0x6>
 138:	00 00       	nop
 13a:	28 98       	cbi	0x05, 0	; 5
 13c:	95 e3       	ldi	r25, 0x35	; 53
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <Write_byte+0x10>
 142:	00 00       	nop
 144:	80 5e       	subi	r24, 0xE0	; 224
 146:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 14a:	85 e3       	ldi	r24, 0x35	; 53
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <Write_byte+0x1e>
 150:	00 00       	nop
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 158:	95 e3       	ldi	r25, 0x35	; 53
 15a:	9a 95       	dec	r25
 15c:	f1 f7       	brne	.-4      	; 0x15a <Write_byte+0x2c>
 15e:	00 00       	nop
 160:	28 9a       	sbi	0x05, 0	; 5
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <Init_nrf>:
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <Init_nrf+0x6>
 174:	00 c0       	rjmp	.+0      	; 0x176 <Init_nrf+0x10>
 176:	00 00       	nop
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 190:	69 e6       	ldi	r22, 0x69	; 105
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 198:	6e e0       	ldi	r22, 0x0E	; 14
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 1a0:	25 e3       	ldi	r18, 0x35	; 53
 1a2:	2a 95       	dec	r18
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Init_nrf+0x3c>
 1a6:	00 00       	nop
 1a8:	28 98       	cbi	0x05, 0	; 5
 1aa:	85 e3       	ldi	r24, 0x35	; 53
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <Init_nrf+0x46>
 1b0:	00 00       	nop
 1b2:	8a e2       	ldi	r24, 0x2A	; 42
 1b4:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 1b8:	95 e3       	ldi	r25, 0x35	; 53
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <Init_nrf+0x54>
 1be:	00 00       	nop
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 1c6:	25 e3       	ldi	r18, 0x35	; 53
 1c8:	2a 95       	dec	r18
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <Init_nrf+0x62>
 1cc:	00 00       	nop
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 1d4:	85 e3       	ldi	r24, 0x35	; 53
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Init_nrf+0x70>
 1da:	00 00       	nop
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 1e2:	95 e3       	ldi	r25, 0x35	; 53
 1e4:	9a 95       	dec	r25
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <Init_nrf+0x7e>
 1e8:	00 00       	nop
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 1f0:	25 e3       	ldi	r18, 0x35	; 53
 1f2:	2a 95       	dec	r18
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Init_nrf+0x8c>
 1f6:	00 00       	nop
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 1fe:	85 e3       	ldi	r24, 0x35	; 53
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <Init_nrf+0x9a>
 204:	00 00       	nop
 206:	28 9a       	sbi	0x05, 0	; 5
 208:	95 e3       	ldi	r25, 0x35	; 53
 20a:	9a 95       	dec	r25
 20c:	f1 f7       	brne	.-4      	; 0x20a <Init_nrf+0xa4>
 20e:	00 00       	nop
 210:	28 98       	cbi	0x05, 0	; 5
 212:	25 e3       	ldi	r18, 0x35	; 53
 214:	2a 95       	dec	r18
 216:	f1 f7       	brne	.-4      	; 0x214 <Init_nrf+0xae>
 218:	00 00       	nop
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 220:	85 e3       	ldi	r24, 0x35	; 53
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <Init_nrf+0xbc>
 226:	00 00       	nop
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 22e:	95 e3       	ldi	r25, 0x35	; 53
 230:	9a 95       	dec	r25
 232:	f1 f7       	brne	.-4      	; 0x230 <Init_nrf+0xca>
 234:	00 00       	nop
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 23c:	25 e3       	ldi	r18, 0x35	; 53
 23e:	2a 95       	dec	r18
 240:	f1 f7       	brne	.-4      	; 0x23e <Init_nrf+0xd8>
 242:	00 00       	nop
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 24a:	85 e3       	ldi	r24, 0x35	; 53
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <Init_nrf+0xe6>
 250:	00 00       	nop
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 258:	95 e3       	ldi	r25, 0x35	; 53
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <Init_nrf+0xf4>
 25e:	00 00       	nop
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 266:	25 e3       	ldi	r18, 0x35	; 53
 268:	2a 95       	dec	r18
 26a:	f1 f7       	brne	.-4      	; 0x268 <Init_nrf+0x102>
 26c:	00 00       	nop
 26e:	28 9a       	sbi	0x05, 0	; 5
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	81 e1       	ldi	r24, 0x11	; 17
 274:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 278:	6f e2       	ldi	r22, 0x2F	; 47
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 280:	6e e1       	ldi	r22, 0x1E	; 30
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 97 00 	call	0x12e	; 0x12e <Write_byte>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	91 ee       	ldi	r25, 0xE1	; 225
 28c:	24 e0       	ldi	r18, 0x04	; 4
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	20 40       	sbci	r18, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <Init_nrf+0x128>
 296:	00 c0       	rjmp	.+0      	; 0x298 <Init_nrf+0x132>
 298:	00 00       	nop
 29a:	08 95       	ret

0000029c <Flush_tx>:
 29c:	85 e3       	ldi	r24, 0x35	; 53
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <Flush_tx+0x2>
 2a2:	00 00       	nop
 2a4:	28 98       	cbi	0x05, 0	; 5
 2a6:	85 e3       	ldi	r24, 0x35	; 53
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Flush_tx+0xc>
 2ac:	00 00       	nop
 2ae:	81 ee       	ldi	r24, 0xE1	; 225
 2b0:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 2b4:	85 e3       	ldi	r24, 0x35	; 53
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Flush_tx+0x1a>
 2ba:	00 00       	nop
 2bc:	28 9a       	sbi	0x05, 0	; 5
 2be:	85 e3       	ldi	r24, 0x35	; 53
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Flush_tx+0x24>
 2c4:	00 00       	nop
 2c6:	08 95       	ret

000002c8 <transmit_data>:
 2c8:	cf 93       	push	r28
 2ca:	c8 2f       	mov	r28, r24
 2cc:	0e 94 4e 01 	call	0x29c	; 0x29c <Flush_tx>
 2d0:	28 98       	cbi	0x05, 0	; 5
 2d2:	85 e3       	ldi	r24, 0x35	; 53
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <transmit_data+0xc>
 2d8:	00 00       	nop
 2da:	80 ea       	ldi	r24, 0xA0	; 160
 2dc:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 2e0:	95 e3       	ldi	r25, 0x35	; 53
 2e2:	9a 95       	dec	r25
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <transmit_data+0x1a>
 2e6:	00 00       	nop
 2e8:	8c 2f       	mov	r24, r28
 2ea:	0e 94 91 00 	call	0x122	; 0x122 <spi_tranceiver>
 2ee:	85 e3       	ldi	r24, 0x35	; 53
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <transmit_data+0x28>
 2f4:	00 00       	nop
 2f6:	28 9a       	sbi	0x05, 0	; 5
 2f8:	90 e5       	ldi	r25, 0x50	; 80
 2fa:	9a 95       	dec	r25
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <transmit_data+0x32>
 2fe:	2c 9a       	sbi	0x05, 4	; 5
 300:	8a e6       	ldi	r24, 0x6A	; 106
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <transmit_data+0x3a>
 306:	00 c0       	rjmp	.+0      	; 0x308 <transmit_data+0x40>
 308:	2c 98       	cbi	0x05, 4	; 5
 30a:	8f e9       	ldi	r24, 0x9F	; 159
 30c:	9f e0       	ldi	r25, 0x0F	; 15
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <transmit_data+0x46>
 312:	00 c0       	rjmp	.+0      	; 0x314 <transmit_data+0x4c>
 314:	00 00       	nop
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <nRF_Put_String>:
	Write_byte(STATUS, 0x70);
	_delay_us(10);
}

void nRF_Put_String(char *s)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
	//Loop through entire string
	while(*s)
 320:	88 81       	ld	r24, Y
 322:	88 23       	and	r24, r24
 324:	31 f0       	breq	.+12     	; 0x332 <nRF_Put_String+0x18>
 326:	21 96       	adiw	r28, 0x01	; 1
	{
		transmit_data(*s);
 328:	0e 94 64 01 	call	0x2c8	; 0x2c8 <transmit_data>
}

void nRF_Put_String(char *s)
{
	//Loop through entire string
	while(*s)
 32c:	89 91       	ld	r24, Y+
 32e:	81 11       	cpse	r24, r1
 330:	fb cf       	rjmp	.-10     	; 0x328 <nRF_Put_String+0xe>
	{
		transmit_data(*s);
		s++;
	}
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <main>:
** Main function:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	60 97       	sbiw	r28, 0x10	; 16
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
	AVR_Init();
 34c:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	i2c_init();
 350:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <i2c_init>
	
	Init_SPI();
 354:	0e 94 83 00 	call	0x106	; 0x106 <Init_SPI>
	Init_nrf();
 358:	0e 94 b3 00 	call	0x166	; 0x166 <Init_nrf>

	char String_Data[16];

	float angle_scale = 1.0f/16.0f;

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 35c:	80 e5       	ldi	r24, 0x50	; 80
 35e:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_start_wait>
	i2c_write(BNO055_OPR_MODE_ADDR);
 362:	8d e3       	ldi	r24, 0x3D	; 61
 364:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
	i2c_write(OPERATION_MODE_IMUPLUS);		//Set operation mode to IMU
 368:	88 e0       	ldi	r24, 0x08	; 8
 36a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
	i2c_stop();
 36e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	8f e3       	ldi	r24, 0x3F	; 63
 374:	9c e9       	ldi	r25, 0x9C	; 156
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <main+0x3e>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x44>
 37c:	00 00       	nop
	//Endless Loop
	while(1)
	{


		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 37e:	80 e5       	ldi	r24, 0x50	; 80
 380:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_start_wait>
		i2c_write(BNO055_EULER_H_LSB_ADDR);		//Access LSB of Heading Euler angle
 384:	8a e1       	ldi	r24, 0x1A	; 26
 386:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 38a:	81 e5       	ldi	r24, 0x51	; 81
 38c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_rep_start>
		Euler_Raw_LSB = i2c_readNak();
 390:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_readNak>
 394:	18 2f       	mov	r17, r24
		i2c_stop();
 396:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 39a:	80 e5       	ldi	r24, 0x50	; 80
 39c:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_start_wait>
		i2c_write(BNO055_EULER_H_MSB_ADDR);		//Access LSB of Heading Euler angle
 3a0:	8b e1       	ldi	r24, 0x1B	; 27
 3a2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 3a6:	81 e5       	ldi	r24, 0x51	; 81
 3a8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_rep_start>
		Euler_Raw_MSB = i2c_readNak();
 3ac:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_readNak>
 3b0:	08 2f       	mov	r16, r24
		i2c_stop();
 3b2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3b6:	61 2f       	mov	r22, r17
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	70 2b       	or	r23, r16
 3bc:	07 2e       	mov	r0, r23
 3be:	00 0c       	add	r0, r0
 3c0:	88 0b       	sbc	r24, r24
 3c2:	99 0b       	sbc	r25, r25
 3c4:	0e 94 31 03 	call	0x662	; 0x662 <__floatsisf>
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e8       	ldi	r20, 0x80	; 128
 3ce:	5d e3       	ldi	r21, 0x3D	; 61
 3d0:	0e 94 95 03 	call	0x72a	; 0x72a <__mulsf3>
 3d4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixsfsi>
 3d8:	dc 01       	movw	r26, r24
 3da:	cb 01       	movw	r24, r22
 3dc:	4a e0       	ldi	r20, 0x0A	; 10
 3de:	be 01       	movw	r22, r28
 3e0:	6f 5f       	subi	r22, 0xFF	; 255
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	0e 94 2a 04 	call	0x854	; 0x854 <__itoa_ncheck>

		float Euler_H = (float)(Euler_H_Raw) * angle_scale;

		itoa(Euler_H, String_Data, 10);			//Convert integer to string, radix=10

		nRF_Put_String("Y: ");
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF_Put_String>
		nRF_Put_String(String_Data);
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF_Put_String>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 3f8:	80 e5       	ldi	r24, 0x50	; 80
 3fa:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_start_wait>
		i2c_write(BNO055_EULER_R_LSB_ADDR);		//Access LSB of Roll Euler angle
 3fe:	8c e1       	ldi	r24, 0x1C	; 28
 400:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 404:	81 e5       	ldi	r24, 0x51	; 81
 406:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_rep_start>
		Euler_Raw_LSB = i2c_readNak();
 40a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_readNak>
 40e:	18 2f       	mov	r17, r24
		i2c_stop();
 410:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 414:	80 e5       	ldi	r24, 0x50	; 80
 416:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_start_wait>
		i2c_write(BNO055_EULER_R_MSB_ADDR);		//Access MSB of Roll Euler angle
 41a:	8d e1       	ldi	r24, 0x1D	; 29
 41c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 420:	81 e5       	ldi	r24, 0x51	; 81
 422:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_rep_start>
		Euler_Raw_MSB = i2c_readNak();
 426:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_readNak>
 42a:	08 2f       	mov	r16, r24
		i2c_stop();
 42c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop>
 430:	61 2f       	mov	r22, r17
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	70 2b       	or	r23, r16
 436:	07 2e       	mov	r0, r23
 438:	00 0c       	add	r0, r0
 43a:	88 0b       	sbc	r24, r24
 43c:	99 0b       	sbc	r25, r25
 43e:	0e 94 31 03 	call	0x662	; 0x662 <__floatsisf>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	40 e8       	ldi	r20, 0x80	; 128
 448:	5d e3       	ldi	r21, 0x3D	; 61
 44a:	0e 94 95 03 	call	0x72a	; 0x72a <__mulsf3>
 44e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixsfsi>
 452:	dc 01       	movw	r26, r24
 454:	cb 01       	movw	r24, r22
 456:	4a e0       	ldi	r20, 0x0A	; 10
 458:	be 01       	movw	r22, r28
 45a:	6f 5f       	subi	r22, 0xFF	; 255
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	0e 94 2a 04 	call	0x854	; 0x854 <__itoa_ncheck>

		float Euler_R = (float)(Euler_R_Raw) * angle_scale;

		itoa(Euler_R, String_Data, 10);  //convert integer to string, radix=10

		nRF_Put_String(" R: ");
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF_Put_String>
		nRF_Put_String(String_Data);
 46a:	ce 01       	movw	r24, r28
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF_Put_String>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 472:	80 e5       	ldi	r24, 0x50	; 80
 474:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_start_wait>
		i2c_write(BNO055_EULER_P_LSB_ADDR);		//Access LSB of Pitch Euler angle
 478:	8e e1       	ldi	r24, 0x1E	; 30
 47a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 47e:	81 e5       	ldi	r24, 0x51	; 81
 480:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_rep_start>
		Euler_Raw_LSB = i2c_readNak();
 484:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_readNak>
 488:	18 2f       	mov	r17, r24
		i2c_stop();
 48a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 48e:	80 e5       	ldi	r24, 0x50	; 80
 490:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_start_wait>
		i2c_write(BNO055_EULER_P_MSB_ADDR);		//Access LSB of Pitch Euler angle
 494:	8f e1       	ldi	r24, 0x1F	; 31
 496:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 49a:	81 e5       	ldi	r24, 0x51	; 81
 49c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_rep_start>
		Euler_Raw_MSB = i2c_readNak();
 4a0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_readNak>
 4a4:	08 2f       	mov	r16, r24
		i2c_stop();
 4a6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop>
 4aa:	61 2f       	mov	r22, r17
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	70 2b       	or	r23, r16
 4b0:	07 2e       	mov	r0, r23
 4b2:	00 0c       	add	r0, r0
 4b4:	88 0b       	sbc	r24, r24
 4b6:	99 0b       	sbc	r25, r25
 4b8:	0e 94 31 03 	call	0x662	; 0x662 <__floatsisf>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	40 e8       	ldi	r20, 0x80	; 128
 4c2:	5d e3       	ldi	r21, 0x3D	; 61
 4c4:	0e 94 95 03 	call	0x72a	; 0x72a <__mulsf3>
 4c8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixsfsi>
 4cc:	dc 01       	movw	r26, r24
 4ce:	cb 01       	movw	r24, r22
 4d0:	4a e0       	ldi	r20, 0x0A	; 10
 4d2:	be 01       	movw	r22, r28
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	0e 94 2a 04 	call	0x854	; 0x854 <__itoa_ncheck>

		float Euler_P = (float)(Euler_P_Raw) * angle_scale;

		itoa(Euler_P, String_Data, 10);  //convert integer to string, radix=10

		nRF_Put_String(" P: ");
 4dc:	89 e0       	ldi	r24, 0x09	; 9
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF_Put_String>
		nRF_Put_String(String_Data);
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF_Put_String>
		nRF_Put_String("\n");
 4ec:	8e e0       	ldi	r24, 0x0E	; 14
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 8d 01 	call	0x31a	; 0x31a <nRF_Put_String>
 4f4:	44 cf       	rjmp	.-376    	; 0x37e <main+0x46>

000004f6 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 4f6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4fa:	8c e0       	ldi	r24, 0x0C	; 12
 4fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 500:	08 95       	ret

00000502 <i2c_start>:
 502:	94 ea       	ldi	r25, 0xA4	; 164
 504:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 508:	ec eb       	ldi	r30, 0xBC	; 188
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	90 81       	ld	r25, Z
 50e:	99 23       	and	r25, r25
 510:	ec f7       	brge	.-6      	; 0x50c <i2c_start+0xa>
 512:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 516:	98 7f       	andi	r25, 0xF8	; 248
 518:	98 30       	cpi	r25, 0x08	; 8
 51a:	11 f0       	breq	.+4      	; 0x520 <i2c_start+0x1e>
 51c:	90 31       	cpi	r25, 0x10	; 16
 51e:	a1 f4       	brne	.+40     	; 0x548 <i2c_start+0x46>
 520:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 524:	84 e8       	ldi	r24, 0x84	; 132
 526:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 52a:	ec eb       	ldi	r30, 0xBC	; 188
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	88 23       	and	r24, r24
 532:	ec f7       	brge	.-6      	; 0x52e <i2c_start+0x2c>
 534:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 538:	98 7f       	andi	r25, 0xF8	; 248
 53a:	98 31       	cpi	r25, 0x18	; 24
 53c:	39 f0       	breq	.+14     	; 0x54c <i2c_start+0x4a>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 34       	cpi	r25, 0x40	; 64
 542:	29 f4       	brne	.+10     	; 0x54e <i2c_start+0x4c>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	08 95       	ret
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret

00000550 <i2c_start_wait>:
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	ec eb       	ldi	r30, 0xBC	; 188
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	24 ea       	ldi	r18, 0xA4	; 164
 55a:	a9 eb       	ldi	r26, 0xB9	; 185
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	cb eb       	ldi	r28, 0xBB	; 187
 560:	d0 e0       	ldi	r29, 0x00	; 0
 562:	34 e8       	ldi	r19, 0x84	; 132
 564:	44 e9       	ldi	r20, 0x94	; 148
 566:	20 83       	st	Z, r18
 568:	90 81       	ld	r25, Z
 56a:	99 23       	and	r25, r25
 56c:	ec f7       	brge	.-6      	; 0x568 <i2c_start_wait+0x18>
 56e:	9c 91       	ld	r25, X
 570:	98 7f       	andi	r25, 0xF8	; 248
 572:	98 30       	cpi	r25, 0x08	; 8
 574:	11 f0       	breq	.+4      	; 0x57a <i2c_start_wait+0x2a>
 576:	90 31       	cpi	r25, 0x10	; 16
 578:	b1 f7       	brne	.-20     	; 0x566 <i2c_start_wait+0x16>
 57a:	88 83       	st	Y, r24
 57c:	30 83       	st	Z, r19
 57e:	90 81       	ld	r25, Z
 580:	99 23       	and	r25, r25
 582:	ec f7       	brge	.-6      	; 0x57e <i2c_start_wait+0x2e>
 584:	9c 91       	ld	r25, X
 586:	98 7f       	andi	r25, 0xF8	; 248
 588:	90 32       	cpi	r25, 0x20	; 32
 58a:	11 f0       	breq	.+4      	; 0x590 <i2c_start_wait+0x40>
 58c:	98 35       	cpi	r25, 0x58	; 88
 58e:	29 f4       	brne	.+10     	; 0x59a <i2c_start_wait+0x4a>
 590:	40 83       	st	Z, r20
 592:	90 81       	ld	r25, Z
 594:	94 fd       	sbrc	r25, 4
 596:	fd cf       	rjmp	.-6      	; 0x592 <i2c_start_wait+0x42>
 598:	e6 cf       	rjmp	.-52     	; 0x566 <i2c_start_wait+0x16>
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <i2c_rep_start>:
 5a0:	0e 94 81 02 	call	0x502	; 0x502 <i2c_start>
 5a4:	08 95       	ret

000005a6 <i2c_stop>:
 5a6:	84 e9       	ldi	r24, 0x94	; 148
 5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5ac:	ec eb       	ldi	r30, 0xBC	; 188
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	84 fd       	sbrc	r24, 4
 5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <i2c_stop+0xa>
 5b6:	08 95       	ret

000005b8 <i2c_write>:
 5b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 5bc:	84 e8       	ldi	r24, 0x84	; 132
 5be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5c2:	ec eb       	ldi	r30, 0xBC	; 188
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	88 23       	and	r24, r24
 5ca:	ec f7       	brge	.-6      	; 0x5c6 <i2c_write+0xe>
 5cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5d0:	98 7f       	andi	r25, 0xF8	; 248
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	98 32       	cpi	r25, 0x28	; 40
 5d6:	09 f4       	brne	.+2      	; 0x5da <i2c_write+0x22>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	08 95       	ret

000005dc <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 5dc:	84 e8       	ldi	r24, 0x84	; 132
 5de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 5e2:	ec eb       	ldi	r30, 0xBC	; 188
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	88 23       	and	r24, r24
 5ea:	ec f7       	brge	.-6      	; 0x5e6 <i2c_readNak+0xa>
	
    return TWDR;
 5ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 5f0:	08 95       	ret

000005f2 <__fixsfsi>:
 5f2:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 5f6:	68 94       	set
 5f8:	b1 11       	cpse	r27, r1
 5fa:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_szero>
 5fe:	08 95       	ret

00000600 <__fixunssfsi>:
 600:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_splitA>
 604:	88 f0       	brcs	.+34     	; 0x628 <__fixunssfsi+0x28>
 606:	9f 57       	subi	r25, 0x7F	; 127
 608:	98 f0       	brcs	.+38     	; 0x630 <__fixunssfsi+0x30>
 60a:	b9 2f       	mov	r27, r25
 60c:	99 27       	eor	r25, r25
 60e:	b7 51       	subi	r27, 0x17	; 23
 610:	b0 f0       	brcs	.+44     	; 0x63e <__fixunssfsi+0x3e>
 612:	e1 f0       	breq	.+56     	; 0x64c <__fixunssfsi+0x4c>
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	1a f0       	brmi	.+6      	; 0x624 <__fixunssfsi+0x24>
 61e:	ba 95       	dec	r27
 620:	c9 f7       	brne	.-14     	; 0x614 <__fixunssfsi+0x14>
 622:	14 c0       	rjmp	.+40     	; 0x64c <__fixunssfsi+0x4c>
 624:	b1 30       	cpi	r27, 0x01	; 1
 626:	91 f0       	breq	.+36     	; 0x64c <__fixunssfsi+0x4c>
 628:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_zero>
 62c:	b1 e0       	ldi	r27, 0x01	; 1
 62e:	08 95       	ret
 630:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_zero>
 634:	67 2f       	mov	r22, r23
 636:	78 2f       	mov	r23, r24
 638:	88 27       	eor	r24, r24
 63a:	b8 5f       	subi	r27, 0xF8	; 248
 63c:	39 f0       	breq	.+14     	; 0x64c <__fixunssfsi+0x4c>
 63e:	b9 3f       	cpi	r27, 0xF9	; 249
 640:	cc f3       	brlt	.-14     	; 0x634 <__fixunssfsi+0x34>
 642:	86 95       	lsr	r24
 644:	77 95       	ror	r23
 646:	67 95       	ror	r22
 648:	b3 95       	inc	r27
 64a:	d9 f7       	brne	.-10     	; 0x642 <__fixunssfsi+0x42>
 64c:	3e f4       	brtc	.+14     	; 0x65c <__fixunssfsi+0x5c>
 64e:	90 95       	com	r25
 650:	80 95       	com	r24
 652:	70 95       	com	r23
 654:	61 95       	neg	r22
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	8f 4f       	sbci	r24, 0xFF	; 255
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	08 95       	ret

0000065e <__floatunsisf>:
 65e:	e8 94       	clt
 660:	09 c0       	rjmp	.+18     	; 0x674 <__floatsisf+0x12>

00000662 <__floatsisf>:
 662:	97 fb       	bst	r25, 7
 664:	3e f4       	brtc	.+14     	; 0x674 <__floatsisf+0x12>
 666:	90 95       	com	r25
 668:	80 95       	com	r24
 66a:	70 95       	com	r23
 66c:	61 95       	neg	r22
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	99 23       	and	r25, r25
 676:	a9 f0       	breq	.+42     	; 0x6a2 <__floatsisf+0x40>
 678:	f9 2f       	mov	r31, r25
 67a:	96 e9       	ldi	r25, 0x96	; 150
 67c:	bb 27       	eor	r27, r27
 67e:	93 95       	inc	r25
 680:	f6 95       	lsr	r31
 682:	87 95       	ror	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	f1 11       	cpse	r31, r1
 68c:	f8 cf       	rjmp	.-16     	; 0x67e <__floatsisf+0x1c>
 68e:	fa f4       	brpl	.+62     	; 0x6ce <__floatsisf+0x6c>
 690:	bb 0f       	add	r27, r27
 692:	11 f4       	brne	.+4      	; 0x698 <__floatsisf+0x36>
 694:	60 ff       	sbrs	r22, 0
 696:	1b c0       	rjmp	.+54     	; 0x6ce <__floatsisf+0x6c>
 698:	6f 5f       	subi	r22, 0xFF	; 255
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	8f 4f       	sbci	r24, 0xFF	; 255
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	16 c0       	rjmp	.+44     	; 0x6ce <__floatsisf+0x6c>
 6a2:	88 23       	and	r24, r24
 6a4:	11 f0       	breq	.+4      	; 0x6aa <__floatsisf+0x48>
 6a6:	96 e9       	ldi	r25, 0x96	; 150
 6a8:	11 c0       	rjmp	.+34     	; 0x6cc <__floatsisf+0x6a>
 6aa:	77 23       	and	r23, r23
 6ac:	21 f0       	breq	.+8      	; 0x6b6 <__floatsisf+0x54>
 6ae:	9e e8       	ldi	r25, 0x8E	; 142
 6b0:	87 2f       	mov	r24, r23
 6b2:	76 2f       	mov	r23, r22
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <__floatsisf+0x5e>
 6b6:	66 23       	and	r22, r22
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <__floatsisf+0x74>
 6ba:	96 e8       	ldi	r25, 0x86	; 134
 6bc:	86 2f       	mov	r24, r22
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	2a f0       	brmi	.+10     	; 0x6ce <__floatsisf+0x6c>
 6c4:	9a 95       	dec	r25
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	da f7       	brpl	.-10     	; 0x6c4 <__floatsisf+0x62>
 6ce:	88 0f       	add	r24, r24
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	97 f9       	bld	r25, 7
 6d6:	08 95       	ret

000006d8 <__fp_split3>:
 6d8:	57 fd       	sbrc	r21, 7
 6da:	90 58       	subi	r25, 0x80	; 128
 6dc:	44 0f       	add	r20, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	59 f0       	breq	.+22     	; 0x6f8 <__fp_splitA+0x10>
 6e2:	5f 3f       	cpi	r21, 0xFF	; 255
 6e4:	71 f0       	breq	.+28     	; 0x702 <__fp_splitA+0x1a>
 6e6:	47 95       	ror	r20

000006e8 <__fp_splitA>:
 6e8:	88 0f       	add	r24, r24
 6ea:	97 fb       	bst	r25, 7
 6ec:	99 1f       	adc	r25, r25
 6ee:	61 f0       	breq	.+24     	; 0x708 <__fp_splitA+0x20>
 6f0:	9f 3f       	cpi	r25, 0xFF	; 255
 6f2:	79 f0       	breq	.+30     	; 0x712 <__fp_splitA+0x2a>
 6f4:	87 95       	ror	r24
 6f6:	08 95       	ret
 6f8:	12 16       	cp	r1, r18
 6fa:	13 06       	cpc	r1, r19
 6fc:	14 06       	cpc	r1, r20
 6fe:	55 1f       	adc	r21, r21
 700:	f2 cf       	rjmp	.-28     	; 0x6e6 <__fp_split3+0xe>
 702:	46 95       	lsr	r20
 704:	f1 df       	rcall	.-30     	; 0x6e8 <__fp_splitA>
 706:	08 c0       	rjmp	.+16     	; 0x718 <__fp_splitA+0x30>
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	18 06       	cpc	r1, r24
 70e:	99 1f       	adc	r25, r25
 710:	f1 cf       	rjmp	.-30     	; 0x6f4 <__fp_splitA+0xc>
 712:	86 95       	lsr	r24
 714:	71 05       	cpc	r23, r1
 716:	61 05       	cpc	r22, r1
 718:	08 94       	sec
 71a:	08 95       	ret

0000071c <__fp_zero>:
 71c:	e8 94       	clt

0000071e <__fp_szero>:
 71e:	bb 27       	eor	r27, r27
 720:	66 27       	eor	r22, r22
 722:	77 27       	eor	r23, r23
 724:	cb 01       	movw	r24, r22
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret

0000072a <__mulsf3>:
 72a:	0e 94 a8 03 	call	0x750	; 0x750 <__mulsf3x>
 72e:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_round>
 732:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscA>
 736:	38 f0       	brcs	.+14     	; 0x746 <__mulsf3+0x1c>
 738:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscB>
 73c:	20 f0       	brcs	.+8      	; 0x746 <__mulsf3+0x1c>
 73e:	95 23       	and	r25, r21
 740:	11 f0       	breq	.+4      	; 0x746 <__mulsf3+0x1c>
 742:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_inf>
 746:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_nan>
 74a:	11 24       	eor	r1, r1
 74c:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_szero>

00000750 <__mulsf3x>:
 750:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_split3>
 754:	70 f3       	brcs	.-36     	; 0x732 <__mulsf3+0x8>

00000756 <__mulsf3_pse>:
 756:	95 9f       	mul	r25, r21
 758:	c1 f3       	breq	.-16     	; 0x74a <__mulsf3+0x20>
 75a:	95 0f       	add	r25, r21
 75c:	50 e0       	ldi	r21, 0x00	; 0
 75e:	55 1f       	adc	r21, r21
 760:	62 9f       	mul	r22, r18
 762:	f0 01       	movw	r30, r0
 764:	72 9f       	mul	r23, r18
 766:	bb 27       	eor	r27, r27
 768:	f0 0d       	add	r31, r0
 76a:	b1 1d       	adc	r27, r1
 76c:	63 9f       	mul	r22, r19
 76e:	aa 27       	eor	r26, r26
 770:	f0 0d       	add	r31, r0
 772:	b1 1d       	adc	r27, r1
 774:	aa 1f       	adc	r26, r26
 776:	64 9f       	mul	r22, r20
 778:	66 27       	eor	r22, r22
 77a:	b0 0d       	add	r27, r0
 77c:	a1 1d       	adc	r26, r1
 77e:	66 1f       	adc	r22, r22
 780:	82 9f       	mul	r24, r18
 782:	22 27       	eor	r18, r18
 784:	b0 0d       	add	r27, r0
 786:	a1 1d       	adc	r26, r1
 788:	62 1f       	adc	r22, r18
 78a:	73 9f       	mul	r23, r19
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	62 1f       	adc	r22, r18
 792:	83 9f       	mul	r24, r19
 794:	a0 0d       	add	r26, r0
 796:	61 1d       	adc	r22, r1
 798:	22 1f       	adc	r18, r18
 79a:	74 9f       	mul	r23, r20
 79c:	33 27       	eor	r19, r19
 79e:	a0 0d       	add	r26, r0
 7a0:	61 1d       	adc	r22, r1
 7a2:	23 1f       	adc	r18, r19
 7a4:	84 9f       	mul	r24, r20
 7a6:	60 0d       	add	r22, r0
 7a8:	21 1d       	adc	r18, r1
 7aa:	82 2f       	mov	r24, r18
 7ac:	76 2f       	mov	r23, r22
 7ae:	6a 2f       	mov	r22, r26
 7b0:	11 24       	eor	r1, r1
 7b2:	9f 57       	subi	r25, 0x7F	; 127
 7b4:	50 40       	sbci	r21, 0x00	; 0
 7b6:	9a f0       	brmi	.+38     	; 0x7de <__mulsf3_pse+0x88>
 7b8:	f1 f0       	breq	.+60     	; 0x7f6 <__mulsf3_pse+0xa0>
 7ba:	88 23       	and	r24, r24
 7bc:	4a f0       	brmi	.+18     	; 0x7d0 <__mulsf3_pse+0x7a>
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	bb 1f       	adc	r27, r27
 7c4:	66 1f       	adc	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	a9 f7       	brne	.-22     	; 0x7ba <__mulsf3_pse+0x64>
 7d0:	9e 3f       	cpi	r25, 0xFE	; 254
 7d2:	51 05       	cpc	r21, r1
 7d4:	80 f0       	brcs	.+32     	; 0x7f6 <__mulsf3_pse+0xa0>
 7d6:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_inf>
 7da:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_szero>
 7de:	5f 3f       	cpi	r21, 0xFF	; 255
 7e0:	e4 f3       	brlt	.-8      	; 0x7da <__mulsf3_pse+0x84>
 7e2:	98 3e       	cpi	r25, 0xE8	; 232
 7e4:	d4 f3       	brlt	.-12     	; 0x7da <__mulsf3_pse+0x84>
 7e6:	86 95       	lsr	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b7 95       	ror	r27
 7ee:	f7 95       	ror	r31
 7f0:	e7 95       	ror	r30
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	c1 f7       	brne	.-16     	; 0x7e6 <__mulsf3_pse+0x90>
 7f6:	fe 2b       	or	r31, r30
 7f8:	88 0f       	add	r24, r24
 7fa:	91 1d       	adc	r25, r1
 7fc:	96 95       	lsr	r25
 7fe:	87 95       	ror	r24
 800:	97 f9       	bld	r25, 7
 802:	08 95       	ret

00000804 <__fp_inf>:
 804:	97 f9       	bld	r25, 7
 806:	9f 67       	ori	r25, 0x7F	; 127
 808:	80 e8       	ldi	r24, 0x80	; 128
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	08 95       	ret

00000810 <__fp_nan>:
 810:	9f ef       	ldi	r25, 0xFF	; 255
 812:	80 ec       	ldi	r24, 0xC0	; 192
 814:	08 95       	ret

00000816 <__fp_pscA>:
 816:	00 24       	eor	r0, r0
 818:	0a 94       	dec	r0
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	18 06       	cpc	r1, r24
 820:	09 06       	cpc	r0, r25
 822:	08 95       	ret

00000824 <__fp_pscB>:
 824:	00 24       	eor	r0, r0
 826:	0a 94       	dec	r0
 828:	12 16       	cp	r1, r18
 82a:	13 06       	cpc	r1, r19
 82c:	14 06       	cpc	r1, r20
 82e:	05 06       	cpc	r0, r21
 830:	08 95       	ret

00000832 <__fp_round>:
 832:	09 2e       	mov	r0, r25
 834:	03 94       	inc	r0
 836:	00 0c       	add	r0, r0
 838:	11 f4       	brne	.+4      	; 0x83e <__fp_round+0xc>
 83a:	88 23       	and	r24, r24
 83c:	52 f0       	brmi	.+20     	; 0x852 <__fp_round+0x20>
 83e:	bb 0f       	add	r27, r27
 840:	40 f4       	brcc	.+16     	; 0x852 <__fp_round+0x20>
 842:	bf 2b       	or	r27, r31
 844:	11 f4       	brne	.+4      	; 0x84a <__fp_round+0x18>
 846:	60 ff       	sbrs	r22, 0
 848:	04 c0       	rjmp	.+8      	; 0x852 <__fp_round+0x20>
 84a:	6f 5f       	subi	r22, 0xFF	; 255
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	08 95       	ret

00000854 <__itoa_ncheck>:
 854:	bb 27       	eor	r27, r27
 856:	4a 30       	cpi	r20, 0x0A	; 10
 858:	31 f4       	brne	.+12     	; 0x866 <__itoa_ncheck+0x12>
 85a:	99 23       	and	r25, r25
 85c:	22 f4       	brpl	.+8      	; 0x866 <__itoa_ncheck+0x12>
 85e:	bd e2       	ldi	r27, 0x2D	; 45
 860:	90 95       	com	r25
 862:	81 95       	neg	r24
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	0c 94 36 04 	jmp	0x86c	; 0x86c <__utoa_common>

0000086a <__utoa_ncheck>:
 86a:	bb 27       	eor	r27, r27

0000086c <__utoa_common>:
 86c:	fb 01       	movw	r30, r22
 86e:	55 27       	eor	r21, r21
 870:	aa 27       	eor	r26, r26
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	aa 1f       	adc	r26, r26
 878:	a4 17       	cp	r26, r20
 87a:	10 f0       	brcs	.+4      	; 0x880 <__utoa_common+0x14>
 87c:	a4 1b       	sub	r26, r20
 87e:	83 95       	inc	r24
 880:	50 51       	subi	r21, 0x10	; 16
 882:	b9 f7       	brne	.-18     	; 0x872 <__utoa_common+0x6>
 884:	a0 5d       	subi	r26, 0xD0	; 208
 886:	aa 33       	cpi	r26, 0x3A	; 58
 888:	08 f0       	brcs	.+2      	; 0x88c <__utoa_common+0x20>
 88a:	a9 5d       	subi	r26, 0xD9	; 217
 88c:	a1 93       	st	Z+, r26
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	79 f7       	brne	.-34     	; 0x870 <__utoa_common+0x4>
 892:	b1 11       	cpse	r27, r1
 894:	b1 93       	st	Z+, r27
 896:	11 92       	st	Z+, r1
 898:	cb 01       	movw	r24, r22
 89a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <strrev>

0000089e <strrev>:
 89e:	dc 01       	movw	r26, r24
 8a0:	fc 01       	movw	r30, r24
 8a2:	67 2f       	mov	r22, r23
 8a4:	71 91       	ld	r23, Z+
 8a6:	77 23       	and	r23, r23
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <strrev+0x4>
 8aa:	32 97       	sbiw	r30, 0x02	; 2
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <strrev+0x18>
 8ae:	7c 91       	ld	r23, X
 8b0:	6d 93       	st	X+, r22
 8b2:	70 83       	st	Z, r23
 8b4:	62 91       	ld	r22, -Z
 8b6:	ae 17       	cp	r26, r30
 8b8:	bf 07       	cpc	r27, r31
 8ba:	c8 f3       	brcs	.-14     	; 0x8ae <strrev+0x10>
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
