
Base_Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000053e  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800108  00800108  000005da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cbe  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c09  00000000  00000000  000023d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fe  00000000  00000000  00002fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000038dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  00003a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fdc  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e3       	ldi	r30, 0x3E	; 62
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 31       	cpi	r26, 0x10	; 16
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  e2:	0c 94 9d 02 	jmp	0x53a	; 0x53a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	8e e9       	ldi	r24, 0x9E	; 158
  ee:	94 e2       	ldi	r25, 0x24	; 36
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <AVR_Init+0x6>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <AVR_Init+0x10>
  fa:	00 00       	nop
** - Initializes the I/O peripherals
*************************************************************************************/
void AVR_Init(void)
{
	_delay_ms(750);		//Short pause after BNO055 Power-On Reset(Mandatory)
	DDRD |= _BV(1);		//Set TX as output
  fc:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	08 95       	ret

00000102 <UART_Init>:
** - Set the USART mode(Synchronous/Asynchronous/Asynchronous 2x)
** - Enable Receiver & Transmitter(Set RXEN & TXEN bits in UCSRB register)
*************************************************************************************/
void UART_Init(void)
{
	DDRD |= _BV(1);		//Set TX as output
 102:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
 104:	50 98       	cbi	0x0a, 0	; 10

	//Set the BAUD rate(Ref. ATmega32U4 Datasheet Pg.189, Table 18-1)
	//To hard-code the Baud rate, Ref. Tables 18-9 to 18-12 in Pgs. 210 - 213
	UBRR1 = ((F_CPU / (16UL * BAUD)) - 1);
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	//Disables 2x speed
	UCSR1A &= ~(_BV(U2X1));
 112:	e8 ec       	ldi	r30, 0xC8	; 200
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	80 83       	st	Z, r24
	
	//Enable 8-bit character size, one stop-bit, no parity & asynchronous mode
	UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
 11c:	ea ec       	ldi	r30, 0xCA	; 202
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 60       	ori	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
	
	//Enable Transmitter & Receiver
	UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
 126:	e9 ec       	ldi	r30, 0xC9	; 201
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 61       	ori	r24, 0x18	; 24
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <UART_Tx>:
** - Transmits the ADC data via the USB Serial
** - The data is received & displayed in a Hyperterminal
*************************************************************************************/
void UART_Tx(unsigned char data)
{
	loop_until_bit_is_set(UCSR1A, UDRE1);	//Wait until buffer is empty
 132:	e8 ec       	ldi	r30, 0xC8	; 200
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	95 ff       	sbrs	r25, 5
 13a:	fd cf       	rjmp	.-6      	; 0x136 <UART_Tx+0x4>
	UDR1 = data;				//Send data
 13c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 140:	08 95       	ret

00000142 <Init_SPI>:
}

void Init_SPI()
{
	//Set the output pin(s) for SPI
	DDRB |= _BV(CE);	//CE
 142:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(CSN);	//CSN
 144:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(MOSI);  	//MOSI
 146:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(SCLK);  	//SCLK
 148:	21 9a       	sbi	0x04, 1	; 4

	//Set the input pin(s) for SPI
	DDRB &= ~_BV(MISO); 	//MISO
 14a:	23 98       	cbi	0x04, 3	; 4

	
	SPCR |= ((1 << SPE) | (1 << MSTR) | (1 << SPR0));	//Enable SPI as master
 14c:	8c b5       	in	r24, 0x2c	; 44
 14e:	81 65       	ori	r24, 0x51	; 81
 150:	8c bd       	out	0x2c, r24	; 44
	SPCR &= (~_BV(SPI2X) & ~_BV(SPR1)); 		   	//Set clock rate but not too important
 152:	8c b5       	in	r24, 0x2c	; 44
 154:	8c 7f       	andi	r24, 0xFC	; 252
 156:	8c bd       	out	0x2c, r24	; 44
	
	PORTB |= _BV(CSN);	//CSN high
 158:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~_BV(CE);	//CE low
 15a:	2c 98       	cbi	0x05, 4	; 5
 15c:	08 95       	ret

0000015e <spi_tranceiver>:
}

unsigned char spi_tranceiver(unsigned char data)
{
	// Load data into the buffer
	SPDR = data;
 15e:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1 << SPIF)));
 160:	0d b4       	in	r0, 0x2d	; 45
 162:	07 fe       	sbrs	r0, 7
 164:	fd cf       	rjmp	.-6      	; 0x160 <spi_tranceiver+0x2>

	//Return received data
	return(SPDR);
 166:	8e b5       	in	r24, 0x2e	; 46
}
 168:	08 95       	ret

0000016a <Read_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	95 e3       	ldi	r25, 0x35	; 53
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <Read_Byte+0x2>
 170:	00 00       	nop

unsigned char Read_Byte(unsigned char reg)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 172:	28 98       	cbi	0x05, 0	; 5
 174:	95 e3       	ldi	r25, 0x35	; 53
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <Read_Byte+0xc>
 17a:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(R_REGISTER + reg);
 17c:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <Read_Byte+0x18>
 186:	00 00       	nop
	_delay_us(10);
	reg = spi_tranceiver(NOP);
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 18e:	95 e3       	ldi	r25, 0x35	; 53
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <Read_Byte+0x26>
 194:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 196:	28 9a       	sbi	0x05, 0	; 5
	return reg;
}
 198:	08 95       	ret

0000019a <Write_byte>:

void Write_byte(unsigned char reg, unsigned char data)
{
 19a:	cf 93       	push	r28
 19c:	c6 2f       	mov	r28, r22
 19e:	95 e3       	ldi	r25, 0x35	; 53
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Write_byte+0x6>
 1a4:	00 00       	nop
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 1a6:	28 98       	cbi	0x05, 0	; 5
 1a8:	95 e3       	ldi	r25, 0x35	; 53
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <Write_byte+0x10>
 1ae:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(W_REGISTER + reg);
 1b0:	80 5e       	subi	r24, 0xE0	; 224
 1b2:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 1b6:	85 e3       	ldi	r24, 0x35	; 53
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Write_byte+0x1e>
 1bc:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(data);
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 1c4:	95 e3       	ldi	r25, 0x35	; 53
 1c6:	9a 95       	dec	r25
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Write_byte+0x2c>
 1ca:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 1cc:	28 9a       	sbi	0x05, 0	; 5
}
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <Flush_tx>:
 1d2:	85 e3       	ldi	r24, 0x35	; 53
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Flush_tx+0x2>
 1d8:	00 00       	nop
}

void Flush_tx(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 1da:	28 98       	cbi	0x05, 0	; 5
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	8a 95       	dec	r24
 1e0:	f1 f7       	brne	.-4      	; 0x1de <Flush_tx+0xc>
 1e2:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(FLUSH_TX);
 1e4:	81 ee       	ldi	r24, 0xE1	; 225
 1e6:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 1ea:	85 e3       	ldi	r24, 0x35	; 53
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Flush_tx+0x1a>
 1f0:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 1f2:	28 9a       	sbi	0x05, 0	; 5
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Flush_tx+0x24>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <nRF_TX_mode>:
	_delay_ms(100);
}

void nRF_TX_mode(void)
{
	PORTB &= ~_BV(CE); //CE low
 1fe:	2c 98       	cbi	0x05, 4	; 5
	Write_byte(CONFIG, 0x1E);
 200:	6e e1       	ldi	r22, 0x1E	; 30
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	Flush_tx();
 208:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Flush_tx>
 20c:	87 e5       	ldi	r24, 0x57	; 87
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <nRF_TX_mode+0x12>
 214:	00 c0       	rjmp	.+0      	; 0x216 <nRF_TX_mode+0x18>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <Init_nrf>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	81 ee       	ldi	r24, 0xE1	; 225
 21e:	94 e0       	ldi	r25, 0x04	; 4
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <Init_nrf+0x6>
 228:	00 c0       	rjmp	.+0      	; 0x22a <Init_nrf+0x10>
 22a:	00 00       	nop
void Init_nrf(void)
{
	_delay_ms(100);
	
	//Enable auto-acknowledgment for data pipe 0
	Write_byte(EN_AA, 0x01);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Enable data pipe 0
	Write_byte(EN_RXADDR, 0x01);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>

	//Set address width to 5 bytes
	Write_byte(SETUP_AW, 0x03);
 23c:	63 e0       	ldi	r22, 0x03	; 3
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Set channel frequency to 2.505GHz
	Write_byte(RF_CH, 0x69);
 244:	69 e6       	ldi	r22, 0x69	; 105
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Set data rate to 2Mbps and 0dB gain
	Write_byte(RF_SETUP, 0x0E);
 24c:	6e e0       	ldi	r22, 0x0E	; 14
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	25 e3       	ldi	r18, 0x35	; 53
 256:	2a 95       	dec	r18
 258:	f1 f7       	brne	.-4      	; 0x256 <Init_nrf+0x3c>
 25a:	00 00       	nop
	//Enable W_TX_PAYLOAD_NOACK command
	//	Write_byte(FEATURE, 0x01);
	
	//Set the 5-bytes receiver address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 25c:	28 98       	cbi	0x05, 0	; 5
 25e:	85 e3       	ldi	r24, 0x35	; 53
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <Init_nrf+0x46>
 264:	00 00       	nop
	_delay_us(10);
	//Setup p0 pipe address for receiving
	spi_tranceiver(W_REGISTER + RX_ADDR_P0);
 266:	8a e2       	ldi	r24, 0x2A	; 42
 268:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 26c:	95 e3       	ldi	r25, 0x35	; 53
 26e:	9a 95       	dec	r25
 270:	f1 f7       	brne	.-4      	; 0x26e <Init_nrf+0x54>
 272:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x11);
 274:	81 e1       	ldi	r24, 0x11	; 17
 276:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 27a:	25 e3       	ldi	r18, 0x35	; 53
 27c:	2a 95       	dec	r18
 27e:	f1 f7       	brne	.-4      	; 0x27c <Init_nrf+0x62>
 280:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x12);
 282:	82 e1       	ldi	r24, 0x12	; 18
 284:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 288:	85 e3       	ldi	r24, 0x35	; 53
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <Init_nrf+0x70>
 28e:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x13);
 290:	83 e1       	ldi	r24, 0x13	; 19
 292:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 296:	95 e3       	ldi	r25, 0x35	; 53
 298:	9a 95       	dec	r25
 29a:	f1 f7       	brne	.-4      	; 0x298 <Init_nrf+0x7e>
 29c:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x14);
 29e:	84 e1       	ldi	r24, 0x14	; 20
 2a0:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2a4:	25 e3       	ldi	r18, 0x35	; 53
 2a6:	2a 95       	dec	r18
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <Init_nrf+0x8c>
 2aa:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x15);
 2ac:	85 e1       	ldi	r24, 0x15	; 21
 2ae:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2b2:	85 e3       	ldi	r24, 0x35	; 53
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <Init_nrf+0x9a>
 2b8:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2ba:	28 9a       	sbi	0x05, 0	; 5
 2bc:	95 e3       	ldi	r25, 0x35	; 53
 2be:	9a 95       	dec	r25
 2c0:	f1 f7       	brne	.-4      	; 0x2be <Init_nrf+0xa4>
 2c2:	00 00       	nop
	
	//Set the 5-bytes transmitter address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2c4:	28 98       	cbi	0x05, 0	; 5
 2c6:	25 e3       	ldi	r18, 0x35	; 53
 2c8:	2a 95       	dec	r18
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Init_nrf+0xae>
 2cc:	00 00       	nop
	_delay_us(10);
	//Setup the transmitter address
	spi_tranceiver(W_REGISTER + TX_ADDR);
 2ce:	80 e3       	ldi	r24, 0x30	; 48
 2d0:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <Init_nrf+0xbc>
 2da:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xAA);
 2dc:	8a ea       	ldi	r24, 0xAA	; 170
 2de:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2e2:	95 e3       	ldi	r25, 0x35	; 53
 2e4:	9a 95       	dec	r25
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <Init_nrf+0xca>
 2e8:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xBB);
 2ea:	8b eb       	ldi	r24, 0xBB	; 187
 2ec:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2f0:	25 e3       	ldi	r18, 0x35	; 53
 2f2:	2a 95       	dec	r18
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Init_nrf+0xd8>
 2f6:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xCC);
 2f8:	8c ec       	ldi	r24, 0xCC	; 204
 2fa:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2fe:	85 e3       	ldi	r24, 0x35	; 53
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <Init_nrf+0xe6>
 304:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xDD);
 306:	8d ed       	ldi	r24, 0xDD	; 221
 308:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 30c:	95 e3       	ldi	r25, 0x35	; 53
 30e:	9a 95       	dec	r25
 310:	f1 f7       	brne	.-4      	; 0x30e <Init_nrf+0xf4>
 312:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xEE);
 314:	8e ee       	ldi	r24, 0xEE	; 238
 316:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 31a:	25 e3       	ldi	r18, 0x35	; 53
 31c:	2a 95       	dec	r18
 31e:	f1 f7       	brne	.-4      	; 0x31c <Init_nrf+0x102>
 320:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 322:	28 9a       	sbi	0x05, 0	; 5
	
	//Set the payload width as 8-bytes
	Write_byte(RX_PW_P0, 0x08);
 324:	68 e0       	ldi	r22, 0x08	; 8
 326:	81 e1       	ldi	r24, 0x11	; 17
 328:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	//Set the retransmission delay to 750us with 15 retries
//	Write_byte(SETUP_RETR, 0x2F);
	
	//Boot the nrf as TX and mask the maximum retransmission interrupt(disable)
	//Enable CRC and set the length to 2-bytes
	nRF_TX_mode();
 32c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF_TX_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	91 ee       	ldi	r25, 0xE1	; 225
 334:	24 e0       	ldi	r18, 0x04	; 4
 336:	81 50       	subi	r24, 0x01	; 1
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	20 40       	sbci	r18, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <Init_nrf+0x11c>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <Init_nrf+0x126>
 340:	00 00       	nop
 342:	08 95       	ret

00000344 <Flush_rx>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	85 e3       	ldi	r24, 0x35	; 53
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <Flush_rx+0x2>
 34a:	00 00       	nop
}

void Flush_rx(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);
 34c:	28 98       	cbi	0x05, 0	; 5
 34e:	85 e3       	ldi	r24, 0x35	; 53
 350:	8a 95       	dec	r24
 352:	f1 f7       	brne	.-4      	; 0x350 <Flush_rx+0xc>
 354:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(FLUSH_RX);
 356:	82 ee       	ldi	r24, 0xE2	; 226
 358:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 35c:	85 e3       	ldi	r24, 0x35	; 53
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <Flush_rx+0x1a>
 362:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);
 364:	28 9a       	sbi	0x05, 0	; 5
 366:	85 e3       	ldi	r24, 0x35	; 53
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <Flush_rx+0x24>
 36c:	00 00       	nop
 36e:	08 95       	ret

00000370 <Payload_TX>:
	_delay_us(10);
}

void Payload_TX(uint8_t* data, uint8_t len)
{
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
	uint8_t i;
	
	for(i = 0; i < len; i++)
 378:	66 23       	and	r22, r22
 37a:	69 f0       	breq	.+26     	; 0x396 <Payload_TX+0x26>
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d1 e0       	ldi	r29, 0x01	; 1
 380:	61 50       	subi	r22, 0x01	; 1
 382:	06 2f       	mov	r16, r22
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	0f 5f       	subi	r16, 0xFF	; 255
 388:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		spi_tranceiver(BS_payload_TX[i]);
 38a:	89 91       	ld	r24, Y+
 38c:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>

void Payload_TX(uint8_t* data, uint8_t len)
{
	uint8_t i;
	
	for(i = 0; i < len; i++)
 390:	c0 17       	cp	r28, r16
 392:	d1 07       	cpc	r29, r17
 394:	d1 f7       	brne	.-12     	; 0x38a <Payload_TX+0x1a>
	{
		spi_tranceiver(BS_payload_TX[i]);
	}

}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <transmit_data>:

void transmit_data(unsigned char *tdata)
{
	Flush_tx();
 3a0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Flush_tx>
	PORTB &= ~_BV(CSN); //CSN low
 3a4:	28 98       	cbi	0x05, 0	; 5
 3a6:	85 e3       	ldi	r24, 0x35	; 53
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <transmit_data+0x8>
 3ac:	00 00       	nop
	_delay_us(10);
	//Transmit payload with ACK enabled
	spi_tranceiver(W_TX_PAYLOAD);
 3ae:	80 ea       	ldi	r24, 0xA0	; 160
 3b0:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 3b4:	85 e3       	ldi	r24, 0x35	; 53
 3b6:	8a 95       	dec	r24
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <transmit_data+0x16>
 3ba:	00 00       	nop
	_delay_us(10);
	Payload_TX(BS_payload_TX, PAYLOAD_LEN);
 3bc:	68 e0       	ldi	r22, 0x08	; 8
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 b8 01 	call	0x370	; 0x370 <Payload_TX>
 3c6:	85 e3       	ldi	r24, 0x35	; 53
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <transmit_data+0x28>
 3cc:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);  //CSN high
 3ce:	28 9a       	sbi	0x05, 0	; 5
 3d0:	80 e5       	ldi	r24, 0x50	; 80
 3d2:	8a 95       	dec	r24
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <transmit_data+0x32>
	_delay_us(15);      //Need at least 10us before sending
	PORTB |= _BV(CE);   //CE high
 3d6:	2c 9a       	sbi	0x05, 4	; 5
 3d8:	8a e6       	ldi	r24, 0x6A	; 106
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <transmit_data+0x3a>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <transmit_data+0x40>
 3e0:	08 95       	ret

000003e2 <Payload_RX>:
	Write_byte(STATUS, (1<<RX_DR));
}

/* send and receive multiple bytes over SPI */
void Payload_RX(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
	uint8_t i;

	for(i=0; i<len; i++)
 3ee:	44 23       	and	r20, r20
 3f0:	c9 f0       	breq	.+50     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3f2:	ec 01       	movw	r28, r24
 3f4:	06 2f       	mov	r16, r22
 3f6:	17 2f       	mov	r17, r23
 3f8:	41 50       	subi	r20, 0x01	; 1
 3fa:	e4 2e       	mov	r14, r20
 3fc:	f1 2c       	mov	r15, r1
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	e2 1a       	sub	r14, r18
 402:	f2 0a       	sbc	r15, r18
 404:	e8 0e       	add	r14, r24
 406:	f9 1e       	adc	r15, r25
	{
		data_in[i] = spi_tranceiver(data_out[i]);
 408:	89 91       	ld	r24, Y+
 40a:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 40e:	f8 01       	movw	r30, r16
 410:	81 93       	st	Z+, r24
 412:	8f 01       	movw	r16, r30
		UART_Tx(data_in[i]);   //Send the received data to UART
 414:	0e 94 99 00 	call	0x132	; 0x132 <UART_Tx>
		UART_Tx(0x11);	       //BP5
 418:	81 e1       	ldi	r24, 0x11	; 17
 41a:	0e 94 99 00 	call	0x132	; 0x132 <UART_Tx>
/* send and receive multiple bytes over SPI */
void Payload_RX(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i=0; i<len; i++)
 41e:	ce 15       	cp	r28, r14
 420:	df 05       	cpc	r29, r15
 422:	91 f7       	brne	.-28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		data_in[i] = spi_tranceiver(data_out[i]);
		UART_Tx(data_in[i]);   //Send the received data to UART
		UART_Tx(0x11);	       //BP5
	}
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	08 95       	ret

00000432 <nrf24_getData>:

	return 1; /* true */
}

void nrf24_getData(uint8_t* data)
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ec 01       	movw	r28, r24
	/* Pull down chip select */
	PORTB &= ~_BV(CSN); //CSN low
 438:	28 98       	cbi	0x05, 0	; 5

	/* Send command to read RX payload */
	spi_tranceiver(R_RX_PAYLOAD);
 43a:	81 e6       	ldi	r24, 0x61	; 97
 43c:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
	
	/* Read payload */
	Payload_RX(data, data, PAYLOAD_LEN);
 440:	48 e0       	ldi	r20, 0x08	; 8
 442:	be 01       	movw	r22, r28
 444:	ce 01       	movw	r24, r28
 446:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Payload_RX>
	
	/* Pull up chip select */
	PORTB |= _BV(CSN);  //CSN high
 44a:	28 9a       	sbi	0x05, 0	; 5

	/* Reset status register */
	Write_byte(STATUS, (1<<RX_DR));
 44c:	60 e4       	ldi	r22, 0x40	; 64
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
}
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <nrf24_getStatus>:
}

uint8_t nrf24_getStatus()
{
	uint8_t rv;
	PORTB &= ~_BV(CSN); //CSN low
 45a:	28 98       	cbi	0x05, 0	; 5
	rv = spi_tranceiver(NOP);
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
	PORTB |= _BV(CSN);  //CSN high
 462:	28 9a       	sbi	0x05, 0	; 5
	return rv;
}
 464:	08 95       	ret

00000466 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
 466:	0e 94 2d 02 	call	0x45a	; 0x45a <nrf24_getStatus>
 46a:	98 2f       	mov	r25, r24
 46c:	90 73       	andi	r25, 0x30	; 48
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	09 f0       	breq	.+2      	; 0x474 <nrf24_isSending+0xe>
 472:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0; /* false */
	}

	return 1; /* true */
}
 474:	08 95       	ret

00000476 <nrf24_rxFifoEmpty>:
/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
	uint8_t fifoStatus;

	fifoStatus = Read_Byte(FIFO_STATUS);
 476:	87 e1       	ldi	r24, 0x17	; 23
 478:	0e 94 b5 00 	call	0x16a	; 0x16a <Read_Byte>
	
	return (fifoStatus & (1 << RX_EMPTY));
}
 47c:	81 70       	andi	r24, 0x01	; 1
 47e:	08 95       	ret

00000480 <nrf24_dataReady>:
/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady()
{
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = nrf24_getStatus();
 480:	0e 94 2d 02 	call	0x45a	; 0x45a <nrf24_getStatus>

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & (1 << RX_DR))
 484:	86 fd       	sbrc	r24, 6
 486:	07 c0       	rjmp	.+14     	; 0x496 <nrf24_dataReady+0x16>
	{
		return 1;
	}

	return !nrf24_rxFifoEmpty();;
 488:	0e 94 3b 02 	call	0x476	; 0x476 <nrf24_rxFifoEmpty>
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	88 23       	and	r24, r24
 490:	19 f0       	breq	.+6      	; 0x498 <nrf24_dataReady+0x18>
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	01 c0       	rjmp	.+2      	; 0x498 <nrf24_dataReady+0x18>

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & (1 << RX_DR))
	{
		return 1;
 496:	91 e0       	ldi	r25, 0x01	; 1
	}

	return !nrf24_rxFifoEmpty();;
}
 498:	89 2f       	mov	r24, r25
 49a:	08 95       	ret

0000049c <reset>:
 49c:	85 e3       	ldi	r24, 0x35	; 53
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <reset+0x2>
 4a2:	00 00       	nop

void reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	Write_byte(STATUS, 0x70);
 4a4:	60 e7       	ldi	r22, 0x70	; 112
 4a6:	87 e0       	ldi	r24, 0x07	; 7
 4a8:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
 4ac:	85 e3       	ldi	r24, 0x35	; 53
 4ae:	8a 95       	dec	r24
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <reset+0x12>
 4b2:	00 00       	nop
 4b4:	08 95       	ret

000004b6 <nRF_RX_mode>:
	_delay_us(150);
}

void nRF_RX_mode(void)
{
	PORTB &= ~_BV(CE); //CE low
 4b6:	2c 98       	cbi	0x05, 4	; 5
	Write_byte(CONFIG, 0x1F);
 4b8:	6f e1       	ldi	r22, 0x1F	; 31
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	Flush_rx();
 4c0:	0e 94 a2 01 	call	0x344	; 0x344 <Flush_rx>
	reset();
 4c4:	0e 94 4e 02 	call	0x49c	; 0x49c <reset>
	PORTB |= _BV(CE);  //CE high
 4c8:	2c 9a       	sbi	0x05, 4	; 5
 4ca:	87 e5       	ldi	r24, 0x57	; 87
 4cc:	92 e0       	ldi	r25, 0x02	; 2
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <nRF_RX_mode+0x18>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <nRF_RX_mode+0x1e>
 4d4:	00 00       	nop
 4d6:	08 95       	ret

000004d8 <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 4d8:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	Init_SPI();
 4dc:	0e 94 a1 00 	call	0x142	; 0x142 <Init_SPI>
	Init_nrf();
 4e0:	0e 94 0d 01 	call	0x21a	; 0x21a <Init_nrf>
	UART_Init();
 4e4:	0e 94 81 00 	call	0x102	; 0x102 <UART_Init>
** Main function:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
 4e8:	10 e0       	ldi	r17, 0x00	; 0
			//Configure as Receiver
			nRF_RX_mode();

			UART_Tx(0x77);   //Send BP3 to UART
			
			mode = 1;	//Set as RX			
 4ea:	d1 e0       	ldi	r29, 0x01	; 1
** Main function:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
 4ec:	c1 2f       	mov	r28, r17
	int8_t mode = 0;

	//Endless Loop
	while(1)
	{
		if (mode == 0) //TX
 4ee:	c1 11       	cpse	r28, r1
 4f0:	18 c0       	rjmp	.+48     	; 0x522 <main+0x4a>
		{
			//Configure as Transmitter
			nRF_TX_mode();
 4f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF_TX_mode>
		
			UART_Tx(0x55);   //Send BP1 to UART
 4f6:	85 e5       	ldi	r24, 0x55	; 85
 4f8:	0e 94 99 00 	call	0x132	; 0x132 <UART_Tx>
		
			transmit_data(BS_payload_TX);
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <transmit_data>
			while(nrf24_isSending());
 504:	0e 94 33 02 	call	0x466	; 0x466 <nrf24_isSending>
 508:	81 11       	cpse	r24, r1
 50a:	fc cf       	rjmp	.-8      	; 0x504 <main+0x2c>
			reset();
 50c:	0e 94 4e 02 	call	0x49c	; 0x49c <reset>

			UART_Tx(0x66);   //Send BP2 to UART
 510:	86 e6       	ldi	r24, 0x66	; 102
 512:	0e 94 99 00 	call	0x132	; 0x132 <UART_Tx>
		
			//Configure as Receiver
			nRF_RX_mode();
 516:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <nRF_RX_mode>

			UART_Tx(0x77);   //Send BP3 to UART
 51a:	87 e7       	ldi	r24, 0x77	; 119
 51c:	0e 94 99 00 	call	0x132	; 0x132 <UART_Tx>
			
			mode = 1;	//Set as RX			
 520:	cd 2f       	mov	r28, r29
		}

		
		if(nrf24_dataReady())
 522:	0e 94 40 02 	call	0x480	; 0x480 <nrf24_dataReady>
 526:	88 23       	and	r24, r24
 528:	11 f3       	breq	.-60     	; 0x4ee <main+0x16>
		{
			UART_Tx(0x88);   //Send BP4 to UART
 52a:	88 e8       	ldi	r24, 0x88	; 136
 52c:	0e 94 99 00 	call	0x132	; 0x132 <UART_Tx>
			nrf24_getData(BS_payload_RX);
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 19 02 	call	0x432	; 0x432 <nrf24_getData>
 538:	d9 cf       	rjmp	.-78     	; 0x4ec <main+0x14>

0000053a <_exit>:
 53a:	f8 94       	cli

0000053c <__stop_program>:
 53c:	ff cf       	rjmp	.-2      	; 0x53c <__stop_program>
